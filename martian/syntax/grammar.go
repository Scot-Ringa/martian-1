// Code generated by goyacc -l -p mm -o grammar.go grammar.y. DO NOT EDIT.
//
// Copyright (c) 2014 10X Genomics, Inc. All rights reserved.
//
// MRO grammar.
//

package syntax

import __yyfmt__ "fmt"

import (
	"strings"
)

type mmSymType struct {
	yys       int
	global    *Ast
	srcfile   *SourceFile
	arr       int16
	loc       int
	val       []byte
	modifiers *Modifiers
	dec       Dec
	decs      []Dec
	inparam   *InParam
	outparam  *OutParam
	s_member  *StructMember
	retains   []*RetainParam
	stretains *RetainParams
	i_params  *InParams
	o_params  *OutParams
	s_members []*StructMember
	res       *Resources
	par_tuple paramsTuple
	src       *SrcParam
	type_id   TypeId
	exp       Exp
	exps      []Exp
	rexp      *RefExp
	vexp      ValExp
	kvpairs   map[string]Exp
	call      *CallStm
	calls     []*CallStm
	binding   *BindStm
	bindings  *BindStms
	retstm    *ReturnStm
	plretains *PipelineRetains
	reflist   []*RefExp
	includes  []*Include
	intern    *stringIntern
}

const SKIP = 57346
const COMMENT = 57347
const INVALID = 57348
const INCLUDE_DIRECTIVE = 57349
const STAGE = 57350
const PIPELINE = 57351
const CALL = 57352
const RETURN = 57353
const IN = 57354
const OUT = 57355
const SRC = 57356
const AS = 57357
const FILETYPE = 57358
const MAP = 57359
const INT = 57360
const STRING = 57361
const FLOAT = 57362
const PATH = 57363
const BOOL = 57364
const SPLIT = 57365
const USING = 57366
const RETAIN = 57367
const LOCAL = 57368
const PREFLIGHT = 57369
const VOLATILE = 57370
const DISABLED = 57371
const STRICT = 57372
const STRUCT = 57373
const THREADS = 57374
const MEM_GB = 57375
const VMEM_GB = 57376
const SPECIAL = 57377
const ID = 57378
const LITSTRING = 57379
const NUM_FLOAT = 57380
const NUM_INT = 57381
const PY = 57382
const EXEC = 57383
const COMPILED = 57384
const SELF = 57385
const SWEEP = 57386
const TRUE = 57387
const FALSE = 57388
const NULL = 57389
const DEFAULT = 57390

var mmToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SKIP",
	"COMMENT",
	"INVALID",
	"';'",
	"':'",
	"','",
	"'='",
	"'.'",
	"'['",
	"']'",
	"'('",
	"')'",
	"'{'",
	"'}'",
	"'<'",
	"'>'",
	"INCLUDE_DIRECTIVE",
	"STAGE",
	"PIPELINE",
	"CALL",
	"RETURN",
	"IN",
	"OUT",
	"SRC",
	"AS",
	"FILETYPE",
	"MAP",
	"INT",
	"STRING",
	"FLOAT",
	"PATH",
	"BOOL",
	"SPLIT",
	"USING",
	"RETAIN",
	"LOCAL",
	"PREFLIGHT",
	"VOLATILE",
	"DISABLED",
	"STRICT",
	"STRUCT",
	"THREADS",
	"MEM_GB",
	"VMEM_GB",
	"SPECIAL",
	"ID",
	"LITSTRING",
	"NUM_FLOAT",
	"NUM_INT",
	"PY",
	"EXEC",
	"COMPILED",
	"SELF",
	"SWEEP",
	"TRUE",
	"FALSE",
	"NULL",
	"DEFAULT",
}
var mmStatenames = [...]string{}

const mmEofCode = 1
const mmErrCode = 2
const mmInitialStackSize = 16

var mmExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 77,
	14, 143,
	28, 143,
	-2, 83,
	-1, 78,
	14, 146,
	28, 146,
	-2, 84,
	-1, 79,
	14, 154,
	28, 154,
	-2, 85,
}

const mmPrivate = 57344

const mmLast = 979

var mmAct = [...]int{

	63, 133, 62, 246, 146, 154, 4, 113, 227, 31,
	33, 60, 202, 58, 179, 23, 138, 21, 40, 139,
	116, 117, 134, 126, 15, 69, 295, 135, 70, 71,
	72, 22, 120, 294, 262, 24, 296, 73, 76, 80,
	293, 39, 25, 26, 194, 195, 196, 241, 45, 108,
	225, 201, 178, 68, 221, 52, 56, 50, 46, 49,
	57, 43, 53, 54, 55, 47, 48, 51, 41, 12,
	10, 11, 74, 44, 42, 64, 36, 25, 26, 16,
	273, 35, 107, 101, 239, 247, 40, 106, 203, 297,
	109, 180, 203, 180, 253, 102, 40, 237, 136, 137,
	141, 142, 114, 111, 112, 220, 278, 238, 148, 104,
	274, 275, 276, 277, 8, 229, 40, 38, 152, 149,
	99, 9, 140, 32, 27, 28, 8, 153, 97, 27,
	28, 8, 17, 9, 100, 136, 151, 17, 9, 141,
	290, 141, 98, 182, 40, 175, 174, 29, 280, 40,
	231, 175, 29, 268, 40, 259, 170, 171, 164, 175,
	166, 186, 160, 136, 189, 250, 165, 169, 160, 141,
	176, 251, 177, 187, 7, 127, 40, 199, 34, 187,
	183, 184, 185, 175, 200, 191, 181, 204, 270, 212,
	192, 140, 141, 215, 159, 89, 198, 197, 152, 129,
	130, 131, 132, 90, 264, 34, 214, 228, 213, 87,
	260, 164, 223, 255, 224, 254, 248, 88, 211, 165,
	168, 162, 95, 94, 93, 232, 83, 75, 205, 82,
	84, 182, 143, 245, 81, 244, 242, 249, 82, 86,
	85, 289, 288, 287, 286, 285, 167, 256, 258, 136,
	261, 22, 161, 158, 157, 24, 156, 155, 302, 301,
	300, 267, 102, 266, 299, 298, 292, 291, 45, 271,
	263, 279, 282, 284, 257, 190, 56, 50, 46, 49,
	57, 43, 53, 54, 55, 47, 48, 51, 41, 12,
	10, 11, 243, 44, 42, 64, 188, 25, 26, 16,
	22, 240, 235, 234, 24, 233, 230, 210, 209, 208,
	207, 206, 145, 144, 92, 91, 3, 45, 1, 30,
	61, 5, 265, 236, 52, 56, 50, 46, 49, 57,
	43, 53, 54, 55, 47, 48, 51, 41, 12, 10,
	11, 96, 44, 42, 64, 188, 25, 26, 16, 22,
	103, 128, 226, 24, 66, 65, 14, 13, 172, 219,
	115, 269, 252, 272, 173, 147, 45, 20, 19, 18,
	37, 193, 119, 52, 56, 50, 46, 49, 57, 43,
	53, 54, 55, 47, 48, 51, 41, 12, 10, 11,
	2, 44, 42, 64, 0, 25, 26, 16, 22, 59,
	0, 0, 24, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 52, 56, 50, 46, 49, 57, 43, 53,
	54, 55, 47, 48, 51, 41, 12, 10, 11, 22,
	44, 42, 64, 24, 25, 26, 16, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 45, 0, 0, 0,
	0, 0, 0, 52, 56, 50, 46, 49, 57, 43,
	53, 54, 55, 47, 48, 51, 41, 12, 10, 11,
	150, 44, 42, 64, 0, 25, 26, 16, 0, 0,
	0, 0, 0, 0, 45, 118, 121, 122, 124, 123,
	125, 52, 56, 50, 46, 49, 57, 43, 53, 54,
	55, 47, 48, 51, 41, 45, 0, 0, 0, 44,
	42, 0, 52, 56, 50, 46, 49, 57, 43, 53,
	54, 55, 47, 48, 51, 41, 0, 0, 0, 0,
	44, 42, 0, 0, 0, 0, 0, 105, 45, 118,
	121, 122, 124, 123, 125, 52, 56, 50, 46, 49,
	57, 43, 53, 54, 55, 47, 48, 51, 41, 0,
	0, 0, 0, 44, 42, 45, 0, 121, 122, 124,
	123, 125, 52, 56, 50, 46, 49, 57, 43, 53,
	54, 55, 47, 48, 51, 41, 0, 0, 216, 0,
	44, 42, 217, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 45, 0, 0, 0, 0,
	0, 0, 52, 56, 50, 46, 49, 57, 43, 53,
	54, 55, 47, 48, 51, 41, 281, 0, 0, 0,
	44, 42, 64, 0, 0, 0, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 0, 52, 56, 50,
	46, 49, 57, 43, 53, 54, 55, 47, 48, 51,
	41, 0, 0, 0, 22, 44, 42, 64, 24, 0,
	0, 0, 6, 27, 28, 8, 0, 0, 0, 0,
	0, 17, 9, 0, 0, 0, 222, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 29, 0, 0, 0,
	0, 0, 12, 10, 11, 0, 45, 0, 0, 0,
	25, 26, 16, 52, 56, 50, 46, 49, 57, 43,
	53, 54, 55, 47, 48, 51, 41, 180, 45, 0,
	0, 44, 42, 0, 0, 52, 56, 50, 46, 49,
	57, 43, 53, 54, 55, 47, 48, 51, 41, 67,
	0, 0, 0, 44, 42, 64, 0, 0, 0, 0,
	0, 45, 0, 0, 0, 0, 0, 0, 52, 56,
	50, 46, 49, 57, 43, 53, 54, 55, 47, 48,
	51, 41, 68, 283, 0, 0, 44, 42, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 52, 56, 50, 46, 49, 57,
	43, 53, 54, 55, 47, 48, 51, 41, 218, 0,
	0, 0, 44, 42, 0, 0, 0, 0, 0, 0,
	0, 0, 45, 0, 0, 0, 0, 0, 0, 52,
	56, 50, 46, 49, 57, 43, 53, 54, 55, 47,
	48, 51, 41, 163, 0, 0, 0, 44, 42, 0,
	0, 0, 0, 0, 0, 0, 0, 45, 0, 0,
	0, 0, 0, 0, 52, 56, 50, 46, 49, 57,
	43, 53, 54, 55, 47, 48, 51, 41, 110, 0,
	0, 0, 44, 42, 0, 0, 0, 0, 0, 0,
	45, 0, 0, 0, 0, 0, 0, 52, 56, 50,
	46, 49, 57, 43, 53, 54, 55, 47, 48, 51,
	41, 45, 0, 0, 0, 44, 42, 0, 52, 56,
	50, 46, 49, 57, 43, 53, 54, 55, 47, 48,
	51, 41, 45, 0, 0, 0, 44, 42, 0, 52,
	56, 50, 77, 78, 79, 43, 53, 54, 55, 47,
	48, 51, 41, 0, 0, 0, 0, 44, 42,
}
var mmPact = [...]int{

	662, -1000, 103, 108, 44, -1000, 26, -1000, -1000, 94,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 902, -1000, -1000,
	-1000, -1000, 386, -1000, 742, -1000, -1000, 902, 902, 902,
	108, 44, 22, 44, -1000, 213, -1000, 923, 902, 227,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 217, -1000,
	-1000, -1000, -1000, 229, 228, 200, 186, -1000, 307, 306,
	210, 209, 208, 44, -1000, -1000, 114, -1000, -1000, -1000,
	106, -1000, 902, 337, -1000, 486, 902, 32, -1000, 881,
	-1000, 427, 427, -1000, -1000, 519, 160, 902, 902, 902,
	902, -1000, -1000, -1000, 218, -1000, 221, 305, -1000, 304,
	-1000, -1000, -1000, 83, 83, 465, -1000, 902, 109, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 218, -1000, -1000, 247,
	246, 244, 243, 179, 902, -1000, 242, 207, 848, -1000,
	902, 236, 206, 902, 427, 427, 119, -1000, 519, 157,
	-1000, -1000, 43, 546, 219, -16, -16, -16, 709, -1000,
	-1000, 288, 902, -1000, -1000, -1000, -1000, 239, 902, 218,
	-1000, -1000, 175, -1000, -9, 519, 902, 168, -1000, 42,
	-1000, -1000, 215, 302, 301, 300, 299, 298, 204, 174,
	586, 813, 69, 4, -1000, -1000, -1000, 687, -1000, 41,
	91, -1000, 297, -1000, 131, -1000, -1000, -1000, -1000, -1000,
	-1000, 427, -1000, 296, 294, 293, 427, 3, -1000, 60,
	70, 292, -1000, 38, 283, -1000, 91, 47, 44, 202,
	-1000, -1000, 156, -1000, -1000, -1000, 56, 201, 199, -1000,
	-1000, -1000, 265, -1000, 47, 44, 138, 196, 902, 219,
	19, 261, -1000, 190, -1000, -1000, 83, -1000, 136, -1000,
	-1000, 173, 260, -1000, -1000, 65, 83, 133, -1000, 621,
	-1000, -1000, 778, -1000, 235, 234, 233, 232, 231, 125,
	-1000, -1000, 258, -1000, 257, -12, -19, -26, -14, 46,
	-1000, -1000, -1000, 256, 255, 251, 250, 249, -1000, -1000,
	-1000, -1000, -1000,
}
var mmPgo = [...]int{

	0, 390, 0, 23, 32, 372, 14, 371, 12, 370,
	5, 174, 369, 368, 367, 316, 365, 364, 20, 363,
	362, 361, 3, 7, 4, 360, 359, 358, 21, 11,
	2, 320, 24, 357, 17, 356, 15, 13, 355, 354,
	6, 352, 27, 19, 351, 1, 22, 16, 341, 8,
	323, 322, 318,
}
var mmR1 = [...]int{

	0, 52, 52, 52, 52, 52, 52, 52, 1, 1,
	15, 15, 11, 11, 11, 11, 13, 13, 12, 14,
	50, 50, 51, 51, 51, 51, 51, 51, 20, 20,
	19, 19, 3, 3, 10, 10, 23, 23, 16, 16,
	24, 24, 17, 17, 17, 17, 25, 25, 18, 18,
	18, 27, 6, 8, 5, 5, 4, 4, 4, 4,
	4, 4, 28, 28, 7, 7, 7, 26, 26, 26,
	49, 22, 22, 21, 21, 41, 41, 40, 40, 40,
	40, 40, 9, 9, 9, 9, 48, 48, 44, 44,
	44, 44, 46, 46, 45, 45, 47, 47, 47, 47,
	42, 42, 42, 43, 43, 43, 37, 37, 38, 38,
	39, 39, 29, 29, 31, 31, 31, 31, 31, 31,
	31, 34, 34, 33, 33, 36, 36, 35, 35, 35,
	35, 32, 32, 30, 30, 30, 30, 30, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2,
}
var mmR2 = [...]int{

	0, 2, 3, 2, 1, 2, 1, 1, 3, 2,
	2, 1, 3, 1, 1, 1, 11, 10, 10, 5,
	0, 4, 0, 5, 5, 5, 5, 5, 0, 4,
	0, 3, 3, 1, 0, 3, 0, 2, 5, 4,
	0, 2, 3, 4, 5, 2, 1, 2, 3, 4,
	5, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 6, 2, 1, 1, 1, 0, 6, 5,
	4, 0, 4, 0, 3, 2, 1, 6, 8, 6,
	8, 5, 0, 2, 2, 2, 0, 2, 4, 4,
	4, 4, 2, 1, 1, 0, 1, 2, 2, 2,
	4, 8, 7, 5, 5, 5, 3, 1, 5, 3,
	5, 3, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 3, 4, 1, 2, 3, 4, 1, 3, 4,
	2, 1, 1, 3, 3, 1, 3, 5, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1,
}
var mmChk = [...]int{

	-1000, -52, -1, -15, -40, -31, 20, -11, 23, 30,
	51, 52, 50, -33, -35, -32, 60, 29, -12, -13,
	-14, -34, 12, -36, 16, 58, 59, 21, 22, 44,
	-15, -40, 20, -40, -11, 37, 50, -9, 23, -3,
	-2, 49, 55, 42, 54, 29, 39, 46, 47, 40,
	38, 48, 36, 43, 44, 45, 37, 41, -37, 13,
	-29, -31, -30, -2, 56, -38, -39, 17, 50, -2,
	-2, -2, -2, -40, 50, 14, -2, 39, 40, 41,
	-2, 7, 11, 9, 13, 11, 11, 9, 17, 9,
	17, 8, 8, 14, 14, 14, -48, 14, 28, 14,
	28, -2, -29, 13, -3, 61, -2, 50, 17, -2,
	17, -29, -29, -23, -23, -25, -18, -28, 30, -5,
	-4, 31, 32, 34, 33, 35, -3, 15, -44, 39,
	40, 41, 42, -45, -46, -42, -2, -2, -47, -43,
	-46, -2, -2, 11, 8, 8, -24, -16, 25, -24,
	15, -18, -2, 18, -10, 10, 10, 10, 10, 15,
	-42, 10, 14, 15, -43, -42, -43, 10, 14, -3,
	-29, -29, -27, -17, 27, 26, -28, 15, 9, -6,
	50, -4, 12, -32, -32, -32, -30, -29, 57, -45,
	36, -47, 15, -7, 53, 54, 55, -28, -18, -2,
	16, 9, -8, 50, -10, 13, 9, 9, 9, 9,
	9, 14, 15, -34, -36, -30, 12, 16, 15, -26,
	36, 50, 9, -6, -6, 9, -41, -49, -40, 24,
	9, 19, -37, 9, 9, 9, -50, 37, 37, 14,
	9, 9, -8, 9, -49, -40, -22, 38, 14, -10,
	9, 15, -20, 38, 14, 14, -23, 9, -22, 17,
	14, -45, 15, 9, 14, -51, -23, -24, 17, -21,
	15, 9, -19, 15, 45, 46, 47, 48, 41, -24,
	15, 15, -30, 15, -2, 10, 10, 10, 10, 10,
	15, 9, 9, 52, 52, 52, 50, 43, 9, 9,
	9, 9, 9,
}
var mmDef = [...]int{

	0, -2, 0, 4, 6, 7, 0, 11, 82, 0,
	114, 115, 116, 117, 118, 119, 120, 0, 13, 14,
	15, 123, 0, 127, 0, 131, 132, 0, 0, 0,
	1, 3, 0, 5, 10, 0, 9, 0, 0, 0,
	33, 138, 139, 140, 141, 142, 143, 144, 145, 146,
	147, 148, 149, 150, 151, 152, 153, 154, 0, 124,
	107, 112, 113, 135, 0, 0, 0, 130, 0, 0,
	0, 0, 0, 2, 8, 86, 0, -2, -2, -2,
	0, 12, 0, 0, 121, 0, 0, 0, 125, 0,
	128, 0, 0, 36, 36, 0, 0, 95, 0, 0,
	0, 32, 106, 122, 133, 134, 136, 0, 126, 0,
	129, 109, 111, 40, 40, 0, 46, 0, 55, 34,
	54, 56, 57, 58, 59, 60, 61, 81, 87, 0,
	0, 0, 0, 0, 94, 93, 0, 0, 0, 96,
	0, 0, 0, 0, 0, 0, 0, 37, 0, 0,
	19, 47, 0, 0, 63, 0, 0, 0, 0, 77,
	92, 0, 95, 79, 98, 99, 97, 0, 0, 137,
	108, 110, 0, 41, 0, 0, 0, 0, 48, 0,
	52, 34, 0, 0, 0, 0, 0, 0, 0, 0,
	149, 0, 67, 0, 64, 65, 66, 0, 45, 0,
	0, 49, 0, 53, 0, 35, 88, 89, 90, 91,
	100, 0, 78, 0, 0, 0, 0, 0, 80, 20,
	0, 0, 42, 0, 0, 39, 0, 71, 76, 0,
	50, 34, 0, 103, 104, 105, 28, 0, 0, 36,
	51, 43, 0, 38, 71, 75, 0, 0, 95, 62,
	0, 0, 18, 0, 22, 36, 40, 44, 0, 17,
	73, 0, 0, 102, 30, 0, 40, 0, 16, 0,
	70, 101, 0, 21, 0, 0, 0, 0, 0, 0,
	69, 72, 0, 29, 0, 0, 0, 0, 0, 0,
	68, 74, 31, 0, 0, 0, 0, 0, 23, 24,
	25, 26, 27,
}
var mmTok1 = [...]int{

	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	14, 15, 3, 3, 9, 3, 11, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 8, 7,
	18, 10, 19, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 12, 3, 13, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 16, 3, 17,
}
var mmTok2 = [...]int{

	2, 3, 4, 5, 6, 20, 21, 22, 23, 24,
	25, 26, 27, 28, 29, 30, 31, 32, 33, 34,
	35, 36, 37, 38, 39, 40, 41, 42, 43, 44,
	45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
	55, 56, 57, 58, 59, 60, 61,
}
var mmTok3 = [...]int{
	0,
}

var mmErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

/*	parser for yacc output	*/

var (
	mmDebug        = 0
	mmErrorVerbose = false
)

type mmLexer interface {
	Lex(lval *mmSymType) int
	Error(s string)
}

type mmParser interface {
	Parse(mmLexer) int
	Lookahead() int
}

type mmParserImpl struct {
	lval  mmSymType
	stack [mmInitialStackSize]mmSymType
	char  int
}

func (p *mmParserImpl) Lookahead() int {
	return p.char
}

func mmNewParser() mmParser {
	return &mmParserImpl{}
}

const mmFlag = -1000

func mmTokname(c int) string {
	if c >= 1 && c-1 < len(mmToknames) {
		if mmToknames[c-1] != "" {
			return mmToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func mmStatname(s int) string {
	if s >= 0 && s < len(mmStatenames) {
		if mmStatenames[s] != "" {
			return mmStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func mmErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !mmErrorVerbose {
		return "syntax error"
	}

	for _, e := range mmErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + mmTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := mmPact[state]
	for tok := TOKSTART; tok-1 < len(mmToknames); tok++ {
		if n := base + tok; n >= 0 && n < mmLast && mmChk[mmAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if mmDef[state] == -2 {
		i := 0
		for mmExca[i] != -1 || mmExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; mmExca[i] >= 0; i += 2 {
			tok := mmExca[i]
			if tok < TOKSTART || mmExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if mmExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += mmTokname(tok)
	}
	return res
}

func mmlex1(lex mmLexer, lval *mmSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = mmTok1[0]
		goto out
	}
	if char < len(mmTok1) {
		token = mmTok1[char]
		goto out
	}
	if char >= mmPrivate {
		if char < mmPrivate+len(mmTok2) {
			token = mmTok2[char-mmPrivate]
			goto out
		}
	}
	for i := 0; i < len(mmTok3); i += 2 {
		token = mmTok3[i+0]
		if token == char {
			token = mmTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = mmTok2[1] /* unknown char */
	}
	if mmDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", mmTokname(token), uint(char))
	}
	return char, token
}

func mmParse(mmlex mmLexer) int {
	return mmNewParser().Parse(mmlex)
}

func (mmrcvr *mmParserImpl) Parse(mmlex mmLexer) int {
	var mmn int
	var mmVAL mmSymType
	var mmDollar []mmSymType
	_ = mmDollar // silence set and not used
	mmS := mmrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	mmstate := 0
	mmrcvr.char = -1
	mmtoken := -1 // mmrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		mmstate = -1
		mmrcvr.char = -1
		mmtoken = -1
	}()
	mmp := -1
	goto mmstack

ret0:
	return 0

ret1:
	return 1

mmstack:
	/* put a state and value onto the stack */
	if mmDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", mmTokname(mmtoken), mmStatname(mmstate))
	}

	mmp++
	if mmp >= len(mmS) {
		nyys := make([]mmSymType, len(mmS)*2)
		copy(nyys, mmS)
		mmS = nyys
	}
	mmS[mmp] = mmVAL
	mmS[mmp].yys = mmstate

mmnewstate:
	mmn = mmPact[mmstate]
	if mmn <= mmFlag {
		goto mmdefault /* simple state */
	}
	if mmrcvr.char < 0 {
		mmrcvr.char, mmtoken = mmlex1(mmlex, &mmrcvr.lval)
	}
	mmn += mmtoken
	if mmn < 0 || mmn >= mmLast {
		goto mmdefault
	}
	mmn = mmAct[mmn]
	if mmChk[mmn] == mmtoken { /* valid shift */
		mmrcvr.char = -1
		mmtoken = -1
		mmVAL = mmrcvr.lval
		mmstate = mmn
		if Errflag > 0 {
			Errflag--
		}
		goto mmstack
	}

mmdefault:
	/* default state action */
	mmn = mmDef[mmstate]
	if mmn == -2 {
		if mmrcvr.char < 0 {
			mmrcvr.char, mmtoken = mmlex1(mmlex, &mmrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if mmExca[xi+0] == -1 && mmExca[xi+1] == mmstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			mmn = mmExca[xi+0]
			if mmn < 0 || mmn == mmtoken {
				break
			}
		}
		mmn = mmExca[xi+1]
		if mmn < 0 {
			goto ret0
		}
	}
	if mmn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			mmlex.Error(mmErrorMessage(mmstate, mmtoken))
			Nerrs++
			if mmDebug >= 1 {
				__yyfmt__.Printf("%s", mmStatname(mmstate))
				__yyfmt__.Printf(" saw %s\n", mmTokname(mmtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for mmp >= 0 {
				mmn = mmPact[mmS[mmp].yys] + mmErrCode
				if mmn >= 0 && mmn < mmLast {
					mmstate = mmAct[mmn] /* simulate a shift of "error" */
					if mmChk[mmstate] == mmErrCode {
						goto mmstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if mmDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", mmS[mmp].yys)
				}
				mmp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if mmDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", mmTokname(mmtoken))
			}
			if mmtoken == mmEofCode {
				goto ret1
			}
			mmrcvr.char = -1
			mmtoken = -1
			goto mmnewstate /* try again in the same state */
		}
	}

	/* reduction by production mmn */
	if mmDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", mmn, mmStatname(mmstate))
	}

	mmnt := mmn
	mmpt := mmp
	_ = mmpt // guard against "declared and not used"

	mmp -= mmR2[mmn]
	// mmp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if mmp+1 >= len(mmS) {
		nyys := make([]mmSymType, len(mmS)*2)
		copy(nyys, mmS)
		mmS = nyys
	}
	mmVAL = mmS[mmp+1]

	/* consult goto table to find next state */
	mmn = mmR1[mmn]
	mmg := mmPgo[mmn]
	mmj := mmg + mmS[mmp].yys + 1

	if mmj >= mmLast {
		mmstate = mmAct[mmg]
	} else {
		mmstate = mmAct[mmj]
		if mmChk[mmstate] != -mmn {
			mmstate = mmAct[mmg]
		}
	}
	// dummy call; replaced with literal code
	switch mmnt {

	case 1:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			global := NewAst(mmDollar[2].decs, nil, mmDollar[2].srcfile)
			global.Includes = mmDollar[1].includes
			mmlex.(*mmLexInfo).global = global
		}
	case 2:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			global := NewAst(mmDollar[2].decs, mmDollar[3].call, mmDollar[2].srcfile)
			global.Includes = mmDollar[1].includes
			mmlex.(*mmLexInfo).global = global
		}
	case 3:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			global := NewAst(nil, mmDollar[2].call, mmDollar[2].srcfile)
			global.Includes = mmDollar[1].includes
			mmlex.(*mmLexInfo).global = global
		}
	case 4:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			global := NewAst(mmDollar[1].decs, nil, mmDollar[1].srcfile)
			mmlex.(*mmLexInfo).global = global
		}
	case 5:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			global := NewAst(mmDollar[1].decs, mmDollar[2].call, mmDollar[1].srcfile)
			mmlex.(*mmLexInfo).global = global
		}
	case 6:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			global := NewAst(nil, mmDollar[1].call, mmDollar[1].srcfile)
			mmlex.(*mmLexInfo).global = global
		}
	case 7:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			global := NewAst(nil, nil, mmDollar[1].srcfile)
			mmlex.(*mmLexInfo).global = global
			mmlex.(*mmLexInfo).exp = mmDollar[1].vexp
		}
	case 8:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.includes = append(mmDollar[1].includes, &Include{
				Node:  NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
				Value: mmDollar[3].intern.unquote(mmDollar[3].val),
			})
		}
	case 9:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmVAL.includes = []*Include{
				{
					Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Value: mmDollar[2].intern.unquote(mmDollar[2].val),
				},
			}
		}
	case 10:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmVAL.decs = append(mmDollar[1].decs, mmDollar[2].dec)
		}
	case 11:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.decs = []Dec{mmDollar[1].dec}
		}
	case 12:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.dec = &UserType{
				Node: NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
				Id:   mmDollar[2].intern.Get(mmDollar[2].val),
			}
		}
	case 16:
		mmDollar = mmS[mmpt-11 : mmpt+1]
		{
			mmVAL.dec = &Pipeline{
				Node:      NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
				Id:        mmDollar[2].intern.Get(mmDollar[2].val),
				InParams:  mmDollar[4].i_params,
				OutParams: mmDollar[5].o_params,
				Calls:     mmDollar[8].calls,
				Callables: &Callables{Table: make(map[string]Callable)},
				Ret:       mmDollar[9].retstm,
				Retain:    mmDollar[10].plretains,
			}
		}
	case 17:
		mmDollar = mmS[mmpt-10 : mmpt+1]
		{
			mmVAL.dec = &Pipeline{
				Node:      NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
				Id:        mmDollar[2].intern.Get(mmDollar[2].val),
				InParams:  mmDollar[4].i_params,
				OutParams: mmDollar[5].o_params,
				Callables: new(Callables),
				Ret:       mmDollar[8].retstm,
				Retain:    mmDollar[9].plretains,
			}
		}
	case 18:
		mmDollar = mmS[mmpt-10 : mmpt+1]
		{
			mmVAL.dec = &Stage{
				Node:      NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
				Id:        mmDollar[2].intern.Get(mmDollar[2].val),
				InParams:  mmDollar[4].i_params,
				OutParams: mmDollar[5].o_params,
				Src:       mmDollar[6].src,
				ChunkIns:  mmDollar[8].par_tuple.Ins,
				ChunkOuts: mmDollar[8].par_tuple.Outs,
				Split:     mmDollar[8].par_tuple.Present,
				Resources: mmDollar[9].res,
				Retain:    mmDollar[10].stretains,
			}
		}
	case 19:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmVAL.dec = &StructType{
				Node:    NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
				Id:      mmDollar[2].intern.Get(mmDollar[2].val),
				Members: mmDollar[4].s_members,
			}
		}
	case 20:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.res = nil
		}
	case 21:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmDollar[3].res.Node = NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)
			mmVAL.res = mmDollar[3].res
		}
	case 22:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.res = new(Resources)
		}
	case 23:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			n := NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile)
			mmDollar[1].res.ThreadNode = &n
			i := parseInt(mmDollar[4].val)
			mmDollar[1].res.Threads = int16(i)
			mmVAL.res = mmDollar[1].res
		}
	case 24:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			n := NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile)
			mmDollar[1].res.MemNode = &n
			i := parseInt(mmDollar[4].val)
			mmDollar[1].res.MemGB = int16(i)
			mmVAL.res = mmDollar[1].res
		}
	case 25:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			n := NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile)
			mmDollar[1].res.VMemNode = &n
			i := parseInt(mmDollar[4].val)
			mmDollar[1].res.VMemGB = int16(i)
			mmVAL.res = mmDollar[1].res
		}
	case 26:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			n := NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile)
			mmDollar[1].res.SpecialNode = &n
			mmDollar[1].res.Special = mmDollar[4].intern.unquote(mmDollar[4].val)
			mmVAL.res = mmDollar[1].res
		}
	case 27:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			n := NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile)
			mmDollar[1].res.VolatileNode = &n
			mmDollar[1].res.StrictVolatile = true
			mmVAL.res = mmDollar[1].res
		}
	case 28:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.stretains = nil
		}
	case 29:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.stretains = &RetainParams{
				Node:   NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Params: mmDollar[3].retains,
			}
		}
	case 30:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.retains = nil
		}
	case 31:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.retains = append(mmDollar[1].retains, &RetainParam{
				Node: NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
				Id:   mmDollar[2].intern.Get(mmDollar[2].val),
			})
		}
	case 32:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.val = append(append(mmDollar[1].val, '.'), mmDollar[3].val...)
		}
	case 33:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			// set capacity == length so append doesn't overwrite
			// other parts of the buffer later.
			mmVAL.val = mmDollar[1].val[:len(mmDollar[1].val):len(mmDollar[1].val)]
		}
	case 34:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.arr = 0
		}
	case 35:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.arr++
		}
	case 36:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.i_params = &InParams{Table: make(map[string]*InParam)}
		}
	case 37:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmDollar[1].i_params.List = append(mmDollar[1].i_params.List, mmDollar[2].inparam)
			mmVAL.i_params = mmDollar[1].i_params
		}
	case 38:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmVAL.inparam = &InParam{
				Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Tname: mmDollar[2].type_id,
				Id:    mmDollar[3].intern.Get(mmDollar[3].val),
				Help:  unquote(mmDollar[4].val),
			}
		}
	case 39:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.inparam = &InParam{
				Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Tname: mmDollar[2].type_id,
				Id:    mmDollar[3].intern.Get(mmDollar[3].val),
			}
		}
	case 40:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.o_params = &OutParams{Table: make(map[string]*OutParam)}
		}
	case 41:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmDollar[1].o_params.List = append(mmDollar[1].o_params.List, mmDollar[2].outparam)
			mmVAL.o_params = mmDollar[1].o_params
		}
	case 42:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.outparam = &OutParam{
				StructMember: StructMember{
					Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Tname: mmDollar[2].type_id,
					Id:    defaultOutName,
				},
			}
		}
	case 43:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.outparam = &OutParam{
				StructMember: StructMember{
					Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Tname: mmDollar[2].type_id,
					Id:    defaultOutName,
					Help:  unquote(mmDollar[3].val),
				},
			}
		}
	case 44:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmVAL.outparam = &OutParam{
				StructMember: StructMember{
					Node:    NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Tname:   mmDollar[2].type_id,
					Id:      defaultOutName,
					OutName: mmDollar[5].intern.unquote(mmDollar[4].val),
					Help:    unquote(mmDollar[3].val),
				},
			}
		}
	case 45:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmVAL.outparam = &OutParam{
				StructMember: *mmDollar[2].s_member,
			}
		}
	case 46:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.s_members = []*StructMember{mmDollar[1].s_member}
		}
	case 47:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmVAL.s_members = append(mmDollar[1].s_members, mmDollar[2].s_member)
		}
	case 48:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.s_member = &StructMember{
				Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Tname: mmDollar[1].type_id,
				Id:    mmDollar[2].intern.Get(mmDollar[2].val),
			}
		}
	case 49:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.s_member = &StructMember{
				Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Tname: mmDollar[1].type_id,
				Id:    mmDollar[2].intern.Get(mmDollar[2].val),
				Help:  unquote(mmDollar[3].val),
			}
		}
	case 50:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmVAL.s_member = &StructMember{
				Node:    NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Tname:   mmDollar[1].type_id,
				Id:      mmDollar[2].intern.Get(mmDollar[2].val),
				OutName: mmDollar[4].intern.unquote(mmDollar[4].val),
				Help:    unquote(mmDollar[3].val),
			}
		}
	case 51:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			cmd := strings.TrimSpace(mmDollar[3].intern.unquote(mmDollar[3].val))
			stagecodeParts := strings.Fields(mmDollar[3].intern.unquote(mmDollar[3].val))
			mmVAL.src = &SrcParam{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Lang: StageLanguage(mmDollar[2].intern.Get(mmDollar[2].val)),
				cmd:  cmd,
				Path: stagecodeParts[0],
				Args: stagecodeParts[1:],
			}
		}
	case 62:
		mmDollar = mmS[mmpt-6 : mmpt+1]
		{
			mmVAL.type_id = TypeId{
				Tname:    mmDollar[3].intern.Get(mmDollar[3].val),
				ArrayDim: mmDollar[6].arr,
				MapDim:   1 + mmDollar[4].arr,
			}
		}
	case 63:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmVAL.type_id = TypeId{
				Tname:    mmDollar[1].intern.Get(mmDollar[1].val),
				ArrayDim: mmDollar[2].arr,
			}
		}
	case 67:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.par_tuple = paramsTuple{
				Present: false,
				Ins:     &InParams{Table: make(map[string]*InParam)},
				Outs:    &OutParams{Table: make(map[string]*OutParam)},
			}
		}
	case 68:
		mmDollar = mmS[mmpt-6 : mmpt+1]
		{
			mmVAL.par_tuple = paramsTuple{
				Present: true,
				Ins:     mmDollar[4].i_params,
				Outs:    mmDollar[5].o_params,
			}
		}
	case 69:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmVAL.par_tuple = paramsTuple{
				Present: true,
				Ins:     mmDollar[3].i_params,
				Outs:    mmDollar[4].o_params,
			}
		}
	case 70:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.retstm = &ReturnStm{
				Node:     NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Bindings: mmDollar[3].bindings,
			}
		}
	case 71:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.plretains = nil
		}
	case 72:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.plretains = &PipelineRetains{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Refs: mmDollar[3].reflist,
			}
		}
	case 73:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.reflist = nil
		}
	case 74:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.reflist = append(mmDollar[1].reflist, mmDollar[2].rexp)
		}
	case 75:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmVAL.calls = append(mmDollar[1].calls, mmDollar[2].call)
		}
	case 76:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.calls = []*CallStm{mmDollar[1].call}
		}
	case 77:
		mmDollar = mmS[mmpt-6 : mmpt+1]
		{
			id := mmDollar[3].intern.Get(mmDollar[3].val)
			mmVAL.call = &CallStm{
				Node:      NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Modifiers: mmDollar[2].modifiers,
				Id:        id,
				DecId:     id,
				Bindings:  mmDollar[5].bindings,
			}
		}
	case 78:
		mmDollar = mmS[mmpt-8 : mmpt+1]
		{
			mmVAL.call = &CallStm{
				Node:      NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Modifiers: mmDollar[2].modifiers,
				Id:        mmDollar[5].intern.Get(mmDollar[5].val),
				DecId:     mmDollar[3].intern.Get(mmDollar[3].val),
				Bindings:  mmDollar[7].bindings,
			}
		}
	case 79:
		mmDollar = mmS[mmpt-6 : mmpt+1]
		{
			id := mmDollar[3].intern.Get(mmDollar[3].val)
			mmVAL.call = &CallStm{
				Node:      NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Modifiers: new(Modifiers),
				Id:        id,
				DecId:     id,
				Bindings:  mmDollar[5].bindings,
				Mapping:   &mapSourcePlaceholder,
			}
		}
	case 80:
		mmDollar = mmS[mmpt-8 : mmpt+1]
		{
			mmVAL.call = &CallStm{
				Node:      NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Modifiers: new(Modifiers),
				Id:        mmDollar[5].intern.Get(mmDollar[5].val),
				DecId:     mmDollar[3].intern.Get(mmDollar[3].val),
				Bindings:  mmDollar[7].bindings,
				Mapping:   &mapSourcePlaceholder,
			}
		}
	case 81:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmDollar[1].call.Modifiers.Bindings = mmDollar[4].bindings
			mmVAL.call = mmDollar[1].call
		}
	case 82:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.modifiers = new(Modifiers)
		}
	case 83:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmVAL.modifiers.Local = true
		}
	case 84:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmVAL.modifiers.Preflight = true
		}
	case 85:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmVAL.modifiers.Volatile = true
		}
	case 86:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.bindings = &BindStms{
				Node:  NewAstNode(mmDollar[0].loc, mmDollar[0].srcfile),
				Table: make(map[string]*BindStm),
			}
		}
	case 87:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmDollar[1].bindings.List = append(mmDollar[1].bindings.List, mmDollar[2].binding)
			mmVAL.bindings = mmDollar[1].bindings
		}
	case 88:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.binding = &BindStm{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Id:   local,
				Exp:  mmDollar[3].vexp,
			}
		}
	case 89:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.binding = &BindStm{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Id:   preflight,
				Exp:  mmDollar[3].vexp,
			}
		}
	case 90:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.binding = &BindStm{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Id:   volatile,
				Exp:  mmDollar[3].vexp,
			}
		}
	case 91:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.binding = &BindStm{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Id:   disabled,
				Exp:  mmDollar[3].rexp,
			}
		}
	case 92:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmDollar[1].bindings.List = append(mmDollar[1].bindings.List, mmDollar[2].binding)
			mmVAL.bindings = mmDollar[1].bindings
		}
	case 93:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.bindings = &BindStms{
				Node:  NewAstNode(mmDollar[0].loc, mmDollar[0].srcfile),
				Table: make(map[string]*BindStm),
				List:  []*BindStm{mmDollar[1].binding},
			}
		}
	case 95:
		mmDollar = mmS[mmpt-0 : mmpt+1]
		{
			mmVAL.bindings = &BindStms{
				Node:  NewAstNode(mmDollar[0].loc, mmDollar[0].srcfile),
				Table: make(map[string]*BindStm),
			}
		}
	case 96:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.bindings = &BindStms{
				Node:  NewAstNode(mmDollar[0].loc, mmDollar[0].srcfile),
				Table: make(map[string]*BindStm),
				List:  []*BindStm{mmDollar[1].binding},
			}
		}
	case 97:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmDollar[1].bindings.List = append(mmDollar[1].bindings.List, mmDollar[2].binding)
			mmVAL.bindings = mmDollar[1].bindings
		}
	case 98:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmDollar[1].bindings.List = append(mmDollar[1].bindings.List, mmDollar[2].binding)
			mmVAL.bindings = mmDollar[1].bindings
		}
	case 99:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmDollar[1].bindings.List = append(mmDollar[1].bindings.List, mmDollar[2].binding)
			mmVAL.bindings = mmDollar[1].bindings
		}
	case 100:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.binding = &BindStm{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Id:   mmDollar[1].intern.Get(mmDollar[1].val),
				Exp:  mmDollar[3].exp,
			}
		}
	case 101:
		mmDollar = mmS[mmpt-8 : mmpt+1]
		{
			mmVAL.binding = &BindStm{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Id:   mmDollar[1].intern.Get(mmDollar[1].val),
				Exp: &SweepExp{
					valExp: valExp{Node: NewAstNode(mmDollar[3].loc, mmDollar[3].srcfile)},
					Value:  mmDollar[5].exps,
				},
				Sweep: true,
			}
		}
	case 102:
		mmDollar = mmS[mmpt-7 : mmpt+1]
		{
			mmVAL.binding = &BindStm{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Id:   mmDollar[1].intern.Get(mmDollar[1].val),
				Exp: &SweepExp{
					valExp: valExp{Node: NewAstNode(mmDollar[3].loc, mmDollar[3].srcfile)},
					Value:  mmDollar[5].exps,
				},
				Sweep: true,
			}
		}
	case 103:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmVAL.binding = &BindStm{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Id:   mmDollar[1].intern.Get(mmDollar[1].val),
				Exp: &SplitExp{
					valExp: valExp{Node: NewAstNode(mmDollar[3].loc, mmDollar[3].srcfile)},
					Value:  mmDollar[4].vexp,
					Source: mmDollar[4].vexp.(MapCallSource),
				},
			}
		}
	case 104:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmVAL.binding = &BindStm{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Id:   mmDollar[1].intern.Get(mmDollar[1].val),
				Exp: &SplitExp{
					valExp: valExp{Node: NewAstNode(mmDollar[3].loc, mmDollar[3].srcfile)},
					Value:  mmDollar[4].vexp,
					Source: mmDollar[4].vexp.(MapCallSource),
				},
			}
		}
	case 105:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmVAL.binding = &BindStm{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Id:   mmDollar[1].intern.Get(mmDollar[1].val),
				Exp: &SplitExp{
					valExp: valExp{Node: NewAstNode(mmDollar[3].loc, mmDollar[3].srcfile)},
					Value:  mmDollar[4].rexp,
				},
			}
		}
	case 106:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.exps = append(mmDollar[1].exps, mmDollar[3].exp)
		}
	case 107:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.exps = []Exp{mmDollar[1].exp}
		}
	case 108:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmDollar[1].kvpairs[unquote(mmDollar[3].val)] = mmDollar[5].exp
			mmVAL.kvpairs = mmDollar[1].kvpairs
		}
	case 109:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.kvpairs = map[string]Exp{unquote(mmDollar[1].val): mmDollar[3].exp}
		}
	case 110:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmDollar[1].kvpairs[mmDollar[3].intern.Get(mmDollar[3].val)] = mmDollar[5].exp
			mmVAL.kvpairs = mmDollar[1].kvpairs
		}
	case 111:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.kvpairs = map[string]Exp{mmDollar[1].intern.Get(mmDollar[1].val): mmDollar[3].exp}
		}
	case 112:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.exp = mmDollar[1].vexp
		}
	case 113:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.exp = mmDollar[1].rexp
		}
	case 114:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{ // Lexer guarantees parseable float strings.
			f := parseFloat(mmDollar[1].val)
			mmVAL.vexp = &FloatExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Value:  f,
			}
		}
	case 115:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{ // Lexer guarantees parseable int strings.
			i := parseInt(mmDollar[1].val)
			mmVAL.vexp = &IntExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Value:  i,
			}
		}
	case 116:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.vexp = &StringExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Kind:   KindString,
				Value:  unquote(mmDollar[1].val),
			}
		}
	case 120:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.vexp = &NullExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
			}
		}
	case 121:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.vexp = &ArrayExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Value:  mmDollar[2].exps,
			}
		}
	case 122:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.vexp = &ArrayExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Value:  mmDollar[2].exps,
			}
		}
	case 124:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmVAL.vexp = &ArrayExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Value:  make([]Exp, 0),
			}
		}
	case 125:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.vexp = &MapExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Kind:   KindMap,
				Value:  mmDollar[2].kvpairs,
			}
		}
	case 126:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.vexp = &MapExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Kind:   KindMap,
				Value:  mmDollar[2].kvpairs,
			}
		}
	case 128:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.vexp = &MapExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Kind:   KindStruct,
				Value:  mmDollar[2].kvpairs,
			}
		}
	case 129:
		mmDollar = mmS[mmpt-4 : mmpt+1]
		{
			mmVAL.vexp = &MapExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Kind:   KindStruct,
				Value:  mmDollar[2].kvpairs,
			}
		}
	case 130:
		mmDollar = mmS[mmpt-2 : mmpt+1]
		{
			mmVAL.vexp = &MapExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Kind:   KindMap,
				Value:  make(map[string]Exp, 0),
			}
		}
	case 131:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.vexp = &BoolExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Value:  true,
			}
		}
	case 132:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.vexp = &BoolExp{
				valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				Value:  false,
			}
		}
	case 133:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.rexp = &RefExp{
				Node:     NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Kind:     KindCall,
				Id:       mmDollar[1].intern.Get(mmDollar[1].val),
				OutputId: mmDollar[3].intern.Get(mmDollar[3].val),
			}
		}
	case 134:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.rexp = &RefExp{
				Node:     NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Kind:     KindCall,
				Id:       mmDollar[1].intern.Get(mmDollar[1].val),
				OutputId: defaultOutName,
			}
		}
	case 135:
		mmDollar = mmS[mmpt-1 : mmpt+1]
		{
			mmVAL.rexp = &RefExp{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Kind: KindCall,
				Id:   mmDollar[1].intern.Get(mmDollar[1].val),
			}
		}
	case 136:
		mmDollar = mmS[mmpt-3 : mmpt+1]
		{
			mmVAL.rexp = &RefExp{
				Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Kind: KindSelf,
				Id:   mmDollar[3].intern.Get(mmDollar[3].val),
			}
		}
	case 137:
		mmDollar = mmS[mmpt-5 : mmpt+1]
		{
			mmVAL.rexp = &RefExp{
				Node:     NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
				Kind:     KindSelf,
				Id:       mmDollar[3].intern.Get(mmDollar[3].val),
				OutputId: mmDollar[5].intern.Get(mmDollar[5].val),
			}
		}
	}
	goto mmstack /* stack new state and value */
}
