// Code generated by goyacc -p mm -o grammar.go grammar.y. DO NOT EDIT.

//line grammar.y:2
//
// Copyright (c) 2014 10X Genomics, Inc. All rights reserved.
//
// MRO grammar.
//

package syntax

import __yyfmt__ "fmt"

//line grammar.y:8

import (
	"strings"
)

//line grammar.y:16
type mmSymType struct {
	yys       int
	global    *Ast
	srcfile   *SourceFile
	arr       int16
	loc       int
	val       []byte
	modifiers *Modifiers
	dec       Dec
	decs      []Dec
	inparam   *InParam
	outparam  *OutParam
	s_member  *StructMember
	retains   []*RetainParam
	stretains *RetainParams
	i_params  *InParams
	o_params  *OutParams
	s_members []*StructMember
	res       *Resources
	par_tuple paramsTuple
	src       *SrcParam
	type_id   TypeId
	exp       Exp
	exps      []Exp
	rexp      *RefExp
	vexp      ValExp
	kvpairs   map[string]Exp
	call      *CallStm
	calls     []*CallStm
	binding   *BindStm
	bindings  *BindStms
	retstm    *ReturnStm
	plretains *PipelineRetains
	reflist   []*RefExp
	includes  []*Include
	intern    *stringIntern
}

const SKIP = 57346
const COMMENT = 57347
const INVALID = 57348
const SEMICOLON = 57349
const COLON = 57350
const COMMA = 57351
const EQUALS = 57352
const LBRACKET = 57353
const RBRACKET = 57354
const LPAREN = 57355
const RPAREN = 57356
const LBRACE = 57357
const RBRACE = 57358
const LANGLE = 57359
const RANGLE = 57360
const SWEEP = 57361
const RETURN = 57362
const SELF = 57363
const FILETYPE = 57364
const STAGE = 57365
const PIPELINE = 57366
const CALL = 57367
const SPLIT = 57368
const USING = 57369
const RETAIN = 57370
const LOCAL = 57371
const PREFLIGHT = 57372
const VOLATILE = 57373
const DISABLED = 57374
const STRICT = 57375
const STRUCT = 57376
const IN = 57377
const OUT = 57378
const SRC = 57379
const AS = 57380
const THREADS = 57381
const MEM_GB = 57382
const VMEM_GB = 57383
const SPECIAL = 57384
const ID = 57385
const LITSTRING = 57386
const NUM_FLOAT = 57387
const NUM_INT = 57388
const DOT = 57389
const PY = 57390
const EXEC = 57391
const COMPILED = 57392
const MAP = 57393
const INT = 57394
const STRING = 57395
const FLOAT = 57396
const PATH = 57397
const BOOL = 57398
const TRUE = 57399
const FALSE = 57400
const NULL = 57401
const DEFAULT = 57402
const INCLUDE_DIRECTIVE = 57403

var mmToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"SKIP",
	"COMMENT",
	"INVALID",
	"SEMICOLON",
	"COLON",
	"COMMA",
	"EQUALS",
	"LBRACKET",
	"RBRACKET",
	"LPAREN",
	"RPAREN",
	"LBRACE",
	"RBRACE",
	"LANGLE",
	"RANGLE",
	"SWEEP",
	"RETURN",
	"SELF",
	"FILETYPE",
	"STAGE",
	"PIPELINE",
	"CALL",
	"SPLIT",
	"USING",
	"RETAIN",
	"LOCAL",
	"PREFLIGHT",
	"VOLATILE",
	"DISABLED",
	"STRICT",
	"STRUCT",
	"IN",
	"OUT",
	"SRC",
	"AS",
	"THREADS",
	"MEM_GB",
	"VMEM_GB",
	"SPECIAL",
	"ID",
	"LITSTRING",
	"NUM_FLOAT",
	"NUM_INT",
	"DOT",
	"PY",
	"EXEC",
	"COMPILED",
	"MAP",
	"INT",
	"STRING",
	"FLOAT",
	"PATH",
	"BOOL",
	"TRUE",
	"FALSE",
	"NULL",
	"DEFAULT",
	"INCLUDE_DIRECTIVE",
}
var mmStatenames = [...]string{}

const mmEofCode = 1
const mmErrCode = 2
const mmInitialStackSize = 16

//line grammar.y:822

//line yacctab:1
var mmExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 73,
	13, 129,
	38, 129,
	-2, 80,
	-1, 74,
	13, 132,
	38, 132,
	-2, 81,
	-1, 75,
	13, 140,
	38, 140,
	-2, 82,
}

const mmPrivate = 57344

const mmLast = 887

var mmAct = [...]int{

	59, 58, 131, 126, 54, 56, 106, 178, 4, 139,
	158, 28, 30, 113, 110, 76, 109, 36, 14, 77,
	119, 128, 65, 22, 23, 66, 67, 68, 20, 81,
	80, 233, 21, 260, 259, 72, 69, 35, 60, 41,
	170, 171, 172, 48, 52, 46, 42, 45, 53, 39,
	49, 50, 258, 207, 261, 77, 51, 43, 44, 47,
	37, 11, 9, 10, 191, 70, 40, 38, 16, 24,
	25, 8, 236, 195, 22, 23, 15, 177, 94, 157,
	26, 36, 99, 33, 95, 102, 133, 101, 179, 241,
	262, 36, 104, 105, 127, 92, 107, 237, 238, 239,
	240, 97, 154, 153, 254, 222, 216, 29, 159, 36,
	134, 137, 179, 32, 159, 100, 16, 24, 25, 8,
	93, 243, 156, 205, 203, 136, 154, 146, 26, 36,
	190, 8, 138, 161, 36, 149, 150, 204, 7, 36,
	199, 212, 31, 154, 154, 165, 8, 120, 155, 148,
	84, 167, 160, 230, 176, 36, 175, 85, 168, 162,
	163, 164, 122, 123, 124, 125, 31, 231, 146, 173,
	180, 174, 186, 82, 137, 226, 224, 268, 223, 218,
	83, 225, 217, 201, 193, 197, 194, 147, 90, 89,
	88, 78, 71, 181, 79, 161, 253, 252, 251, 250,
	249, 208, 166, 143, 142, 211, 214, 141, 140, 213,
	267, 266, 219, 265, 264, 263, 257, 246, 234, 220,
	209, 206, 229, 200, 198, 228, 185, 232, 184, 183,
	95, 242, 130, 146, 20, 182, 248, 129, 21, 87,
	86, 1, 187, 227, 60, 41, 256, 57, 5, 48,
	52, 46, 42, 45, 53, 39, 49, 50, 3, 202,
	210, 27, 51, 43, 44, 47, 37, 11, 9, 10,
	91, 121, 40, 38, 20, 96, 145, 196, 21, 63,
	22, 23, 15, 62, 60, 41, 13, 12, 151, 48,
	52, 46, 42, 45, 53, 39, 49, 50, 189, 108,
	221, 244, 51, 43, 44, 47, 37, 11, 9, 10,
	215, 235, 40, 38, 20, 55, 152, 132, 21, 19,
	22, 23, 15, 18, 60, 41, 17, 34, 169, 48,
	52, 46, 42, 45, 53, 39, 49, 50, 112, 2,
	0, 0, 51, 43, 44, 47, 37, 11, 9, 10,
	0, 0, 40, 38, 20, 0, 0, 0, 21, 0,
	22, 23, 15, 0, 60, 41, 0, 0, 0, 48,
	52, 46, 42, 45, 53, 39, 49, 50, 0, 0,
	0, 0, 51, 43, 44, 47, 37, 11, 9, 10,
	0, 135, 40, 38, 0, 0, 0, 0, 0, 41,
	22, 23, 15, 48, 52, 46, 42, 45, 53, 39,
	49, 50, 0, 0, 0, 0, 51, 43, 44, 47,
	37, 0, 0, 0, 0, 0, 40, 38, 111, 114,
	115, 117, 116, 118, 41, 0, 0, 0, 48, 52,
	46, 42, 45, 53, 39, 49, 50, 0, 0, 0,
	0, 51, 43, 44, 47, 37, 0, 0, 0, 0,
	0, 40, 38, 111, 114, 115, 117, 116, 118, 41,
	0, 0, 0, 48, 52, 46, 42, 45, 53, 39,
	49, 50, 0, 0, 0, 0, 51, 43, 44, 47,
	37, 0, 0, 0, 0, 0, 40, 38, 0, 114,
	115, 117, 116, 118, 41, 0, 0, 0, 48, 52,
	46, 42, 45, 53, 39, 49, 50, 0, 0, 0,
	0, 51, 43, 44, 47, 37, 20, 0, 0, 0,
	21, 40, 38, 0, 0, 0, 0, 16, 24, 25,
	8, 0, 98, 0, 0, 0, 0, 0, 0, 26,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 11,
	9, 10, 0, 0, 0, 0, 0, 0, 0, 0,
	255, 0, 22, 23, 15, 0, 6, 60, 41, 0,
	0, 0, 48, 52, 46, 42, 45, 53, 39, 49,
	50, 192, 0, 0, 0, 51, 43, 44, 47, 37,
	0, 0, 0, 0, 41, 40, 38, 0, 48, 52,
	46, 42, 45, 53, 39, 49, 50, 0, 0, 0,
	0, 51, 43, 44, 47, 37, 159, 61, 0, 0,
	0, 40, 38, 41, 0, 0, 0, 48, 52, 46,
	42, 45, 53, 39, 49, 50, 0, 0, 0, 0,
	51, 43, 44, 47, 37, 64, 247, 0, 0, 0,
	40, 38, 0, 0, 41, 0, 0, 0, 48, 52,
	46, 42, 45, 53, 39, 49, 50, 0, 0, 0,
	0, 51, 43, 44, 47, 37, 245, 0, 0, 0,
	0, 40, 38, 0, 41, 0, 0, 0, 48, 52,
	46, 42, 45, 53, 39, 49, 50, 0, 0, 0,
	0, 51, 43, 44, 47, 37, 188, 0, 0, 0,
	0, 40, 38, 0, 41, 0, 0, 0, 48, 52,
	46, 42, 45, 53, 39, 49, 50, 0, 0, 0,
	0, 51, 43, 44, 47, 37, 0, 0, 60, 41,
	0, 40, 38, 48, 52, 46, 42, 45, 53, 39,
	49, 50, 0, 0, 0, 0, 51, 43, 44, 47,
	37, 144, 0, 0, 0, 0, 40, 38, 0, 41,
	0, 0, 0, 48, 52, 46, 42, 45, 53, 39,
	49, 50, 0, 0, 0, 0, 51, 43, 44, 47,
	37, 0, 103, 0, 0, 0, 40, 38, 41, 0,
	0, 0, 48, 52, 46, 42, 45, 53, 39, 49,
	50, 0, 0, 0, 0, 51, 43, 44, 47, 37,
	0, 0, 0, 41, 0, 40, 38, 48, 52, 46,
	42, 45, 53, 39, 49, 50, 0, 0, 0, 0,
	51, 43, 44, 47, 37, 0, 0, 0, 41, 0,
	40, 38, 48, 52, 46, 73, 74, 75, 39, 49,
	50, 0, 0, 0, 0, 51, 43, 44, 47, 37,
	0, 0, 0, 0, 0, 40, 38,
}
var mmPact = [...]int{

	515, -1000, 46, 94, 86, -1000, 39, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 811, -1000, -1000, -1000,
	303, 611, -1000, -1000, 811, 811, 811, 94, 86, 21,
	86, -1000, 179, -1000, 836, 8, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, 182, -1000, -1000, -1000, -1000, -17,
	-18, -1000, 164, 141, 232, 231, 177, 176, 175, 86,
	-1000, -1000, 82, -1000, -1000, -1000, -1000, 811, 263, -1000,
	482, 811, 71, -1000, 786, -1000, 343, 343, -1000, -1000,
	412, 133, -1000, 811, -1000, -1000, -1000, -28, -1000, -26,
	229, -1000, 224, -1000, -1000, -1000, 51, 51, 377, -1000,
	811, 115, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -28,
	-1000, -1000, 198, 197, 194, 193, 757, 174, 811, 343,
	343, 66, -1000, 412, 108, -1000, -1000, 70, 447, 184,
	-34, -34, -34, 727, -1000, -1000, 192, -1000, -28, -1000,
	-1000, 144, -1000, -8, 412, 811, 139, -1000, 68, -1000,
	-1000, 181, 226, 220, 219, 217, 223, 702, 104, 20,
	-1000, -1000, -1000, 582, -1000, 64, 106, -1000, 215, -1000,
	122, -1000, -1000, -1000, -1000, -1000, 214, 170, -1000, 97,
	110, 212, -1000, 44, 211, -1000, 121, 86, -1000, -1000,
	-1000, 343, 78, 169, 166, -1000, -1000, -1000, 210, -1000,
	77, 86, 165, 184, 167, -1000, 162, -1000, -1000, 51,
	-1000, 137, 154, -1000, 17, 209, -1000, 58, 51, 107,
	-1000, -1000, 672, 208, -1000, 642, -1000, 190, 189, 188,
	187, 186, 90, -1000, 556, -1000, -1000, -1000, 207, 6,
	-12, -13, 10, 57, -1000, -1000, 206, -1000, 205, 204,
	202, 201, 168, -1000, -1000, -1000, -1000, -1000, -1000,
}
var mmPgo = [...]int{

	0, 339, 0, 20, 13, 338, 10, 328, 7, 327,
	9, 138, 326, 323, 319, 258, 317, 316, 16, 311,
	310, 301, 300, 6, 2, 299, 298, 288, 14, 5,
	1, 247, 18, 287, 286, 4, 283, 279, 8, 277,
	276, 271, 3, 270, 260, 259, 243, 241,
}
var mmR1 = [...]int{

	0, 47, 47, 47, 47, 47, 47, 47, 1, 1,
	15, 15, 11, 11, 11, 11, 13, 12, 14, 45,
	45, 46, 46, 46, 46, 46, 46, 20, 20, 19,
	19, 3, 3, 10, 10, 23, 23, 16, 16, 24,
	24, 17, 17, 17, 17, 25, 25, 18, 18, 18,
	27, 6, 8, 5, 5, 4, 4, 4, 4, 4,
	4, 28, 28, 7, 7, 7, 26, 26, 26, 44,
	22, 22, 21, 21, 39, 39, 38, 38, 38, 9,
	9, 9, 9, 43, 43, 41, 41, 41, 41, 42,
	42, 40, 40, 40, 35, 35, 36, 36, 37, 37,
	29, 29, 31, 31, 31, 31, 31, 31, 31, 33,
	33, 33, 34, 34, 34, 34, 34, 32, 32, 30,
	30, 30, 30, 30, 2, 2, 2, 2, 2, 2,
	2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
	2,
}
var mmR2 = [...]int{

	0, 2, 3, 2, 1, 2, 1, 1, 3, 2,
	2, 1, 3, 1, 1, 1, 11, 10, 5, 0,
	4, 0, 5, 5, 5, 5, 5, 0, 4, 0,
	3, 3, 1, 0, 3, 0, 2, 5, 4, 0,
	2, 3, 4, 5, 2, 1, 2, 3, 4, 5,
	4, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 6, 2, 1, 1, 1, 0, 6, 5, 4,
	0, 4, 0, 3, 2, 1, 6, 8, 5, 0,
	2, 2, 2, 0, 2, 4, 4, 4, 4, 0,
	2, 4, 8, 7, 3, 1, 5, 3, 5, 3,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
	4, 2, 2, 3, 4, 3, 4, 1, 1, 3,
	3, 1, 3, 5, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	1,
}
var mmChk = [...]int{

	-1000, -47, -1, -15, -38, -31, 61, -11, 25, 45,
	46, 44, -33, -34, -32, 59, 22, -12, -13, -14,
	11, 15, 57, 58, 23, 24, 34, -15, -38, 61,
	-38, -11, 27, 44, -9, -3, -2, 43, 50, 32,
	49, 22, 29, 40, 41, 30, 28, 42, 26, 33,
	34, 39, 27, 31, -35, 12, -29, -31, -30, -2,
	21, 16, -36, -37, 44, -2, -2, -2, -2, -38,
	44, 13, -2, 29, 30, 31, 7, 47, 9, 12,
	47, 47, 9, 16, 9, 16, 8, 8, 13, 13,
	13, -43, 13, 38, -2, -29, 12, -3, 60, -2,
	44, 16, -2, 16, -29, -29, -23, -23, -25, -18,
	-28, 51, -5, -4, 52, 53, 55, 54, 56, -3,
	14, -41, 29, 30, 31, 32, -42, -2, 47, 8,
	8, -24, -16, 35, -24, 14, -18, -2, 17, -10,
	10, 10, 10, 10, 14, -40, -2, 13, -3, -29,
	-29, -27, -17, 37, 36, -28, 14, 9, -6, 44,
	-4, 11, -32, -32, -32, -30, 10, -42, 14, -7,
	48, 49, 50, -28, -18, -2, 15, 9, -8, 44,
	-10, 12, 9, 9, 9, 9, -29, 19, 14, -26,
	26, 44, 9, -6, -6, 9, -39, -38, 9, 18,
	9, 13, -45, 27, 27, 13, 9, 9, -8, 9,
	-44, -38, 20, -10, -35, -20, 28, 13, 13, -23,
	9, -22, 28, 13, 9, 14, 13, -46, -23, -24,
	16, 13, -42, 14, 9, -19, 14, 39, 40, 41,
	42, 31, -24, 14, -21, 14, 9, 14, -2, 10,
	10, 10, 10, 10, 14, 14, -30, 9, 46, 46,
	46, 44, 33, 9, 9, 9, 9, 9, 9,
}
var mmDef = [...]int{

	0, -2, 0, 4, 6, 7, 0, 11, 79, 102,
	103, 104, 105, 106, 107, 108, 0, 13, 14, 15,
	0, 0, 117, 118, 0, 0, 0, 1, 3, 0,
	5, 10, 0, 9, 0, 0, 32, 124, 125, 126,
	127, 128, 129, 130, 131, 132, 133, 134, 135, 136,
	137, 138, 139, 140, 0, 111, 95, 100, 101, 121,
	0, 112, 0, 0, 0, 0, 0, 0, 0, 2,
	8, 83, 0, -2, -2, -2, 12, 0, 0, 109,
	0, 0, 0, 113, 0, 115, 0, 0, 35, 35,
	0, 0, 89, 0, 31, 94, 110, 119, 120, 122,
	0, 114, 0, 116, 97, 99, 39, 39, 0, 45,
	0, 54, 33, 53, 55, 56, 57, 58, 59, 60,
	78, 84, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 36, 0, 0, 18, 46, 0, 0, 62,
	0, 0, 0, 0, 76, 90, 0, 89, 123, 96,
	98, 0, 40, 0, 0, 0, 0, 47, 0, 51,
	33, 0, 0, 0, 0, 0, 0, 0, 66, 0,
	63, 64, 65, 0, 44, 0, 0, 48, 0, 52,
	0, 34, 85, 86, 87, 88, 0, 0, 77, 19,
	0, 0, 41, 0, 0, 38, 0, 75, 49, 33,
	91, 0, 27, 0, 0, 35, 50, 42, 0, 37,
	70, 74, 0, 61, 0, 17, 0, 21, 35, 39,
	43, 0, 0, 89, 0, 0, 29, 0, 39, 0,
	16, 72, 0, 0, 93, 0, 20, 0, 0, 0,
	0, 0, 0, 68, 0, 69, 92, 28, 0, 0,
	0, 0, 0, 0, 67, 71, 0, 30, 0, 0,
	0, 0, 0, 73, 22, 23, 24, 25, 26,
}
var mmTok1 = [...]int{

	1,
}
var mmTok2 = [...]int{

	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
}
var mmTok3 = [...]int{
	0,
}

var mmErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	mmDebug        = 0
	mmErrorVerbose = false
)

type mmLexer interface {
	Lex(lval *mmSymType) int
	Error(s string)
}

type mmParser interface {
	Parse(mmLexer) int
	Lookahead() int
}

type mmParserImpl struct {
	lval  mmSymType
	stack [mmInitialStackSize]mmSymType
	char  int
}

func (p *mmParserImpl) Lookahead() int {
	return p.char
}

func mmNewParser() mmParser {
	return &mmParserImpl{}
}

const mmFlag = -1000

func mmTokname(c int) string {
	if c >= 1 && c-1 < len(mmToknames) {
		if mmToknames[c-1] != "" {
			return mmToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func mmStatname(s int) string {
	if s >= 0 && s < len(mmStatenames) {
		if mmStatenames[s] != "" {
			return mmStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func mmErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !mmErrorVerbose {
		return "syntax error"
	}

	for _, e := range mmErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + mmTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := mmPact[state]
	for tok := TOKSTART; tok-1 < len(mmToknames); tok++ {
		if n := base + tok; n >= 0 && n < mmLast && mmChk[mmAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if mmDef[state] == -2 {
		i := 0
		for mmExca[i] != -1 || mmExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; mmExca[i] >= 0; i += 2 {
			tok := mmExca[i]
			if tok < TOKSTART || mmExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if mmExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += mmTokname(tok)
	}
	return res
}

func mmlex1(lex mmLexer, lval *mmSymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = mmTok1[0]
		goto out
	}
	if char < len(mmTok1) {
		token = mmTok1[char]
		goto out
	}
	if char >= mmPrivate {
		if char < mmPrivate+len(mmTok2) {
			token = mmTok2[char-mmPrivate]
			goto out
		}
	}
	for i := 0; i < len(mmTok3); i += 2 {
		token = mmTok3[i+0]
		if token == char {
			token = mmTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = mmTok2[1] /* unknown char */
	}
	if mmDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", mmTokname(token), uint(char))
	}
	return char, token
}

func mmParse(mmlex mmLexer) int {
	return mmNewParser().Parse(mmlex)
}

func (mmrcvr *mmParserImpl) Parse(mmlex mmLexer) int {
	var mmn int
	var mmVAL mmSymType
	var mmDollar []mmSymType
	_ = mmDollar // silence set and not used
	mmS := mmrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	mmstate := 0
	mmrcvr.char = -1
	mmtoken := -1 // mmrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		mmstate = -1
		mmrcvr.char = -1
		mmtoken = -1
	}()
	mmp := -1
	goto mmstack

ret0:
	return 0

ret1:
	return 1

mmstack:
	/* put a state and value onto the stack */
	if mmDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", mmTokname(mmtoken), mmStatname(mmstate))
	}

	mmp++
	if mmp >= len(mmS) {
		nyys := make([]mmSymType, len(mmS)*2)
		copy(nyys, mmS)
		mmS = nyys
	}
	mmS[mmp] = mmVAL
	mmS[mmp].yys = mmstate

mmnewstate:
	mmn = mmPact[mmstate]
	if mmn <= mmFlag {
		goto mmdefault /* simple state */
	}
	if mmrcvr.char < 0 {
		mmrcvr.char, mmtoken = mmlex1(mmlex, &mmrcvr.lval)
	}
	mmn += mmtoken
	if mmn < 0 || mmn >= mmLast {
		goto mmdefault
	}
	mmn = mmAct[mmn]
	if mmChk[mmn] == mmtoken { /* valid shift */
		mmrcvr.char = -1
		mmtoken = -1
		mmVAL = mmrcvr.lval
		mmstate = mmn
		if Errflag > 0 {
			Errflag--
		}
		goto mmstack
	}

mmdefault:
	/* default state action */
	mmn = mmDef[mmstate]
	if mmn == -2 {
		if mmrcvr.char < 0 {
			mmrcvr.char, mmtoken = mmlex1(mmlex, &mmrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if mmExca[xi+0] == -1 && mmExca[xi+1] == mmstate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			mmn = mmExca[xi+0]
			if mmn < 0 || mmn == mmtoken {
				break
			}
		}
		mmn = mmExca[xi+1]
		if mmn < 0 {
			goto ret0
		}
	}
	if mmn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			mmlex.Error(mmErrorMessage(mmstate, mmtoken))
			Nerrs++
			if mmDebug >= 1 {
				__yyfmt__.Printf("%s", mmStatname(mmstate))
				__yyfmt__.Printf(" saw %s\n", mmTokname(mmtoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for mmp >= 0 {
				mmn = mmPact[mmS[mmp].yys] + mmErrCode
				if mmn >= 0 && mmn < mmLast {
					mmstate = mmAct[mmn] /* simulate a shift of "error" */
					if mmChk[mmstate] == mmErrCode {
						goto mmstack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if mmDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", mmS[mmp].yys)
				}
				mmp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if mmDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", mmTokname(mmtoken))
			}
			if mmtoken == mmEofCode {
				goto ret1
			}
			mmrcvr.char = -1
			mmtoken = -1
			goto mmnewstate /* try again in the same state */
		}
	}

	/* reduction by production mmn */
	if mmDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", mmn, mmStatname(mmstate))
	}

	mmnt := mmn
	mmpt := mmp
	_ = mmpt // guard against "declared and not used"

	mmp -= mmR2[mmn]
	// mmp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if mmp+1 >= len(mmS) {
		nyys := make([]mmSymType, len(mmS)*2)
		copy(nyys, mmS)
		mmS = nyys
	}
	mmVAL = mmS[mmp+1]

	/* consult goto table to find next state */
	mmn = mmR1[mmn]
	mmg := mmPgo[mmn]
	mmj := mmg + mmS[mmp].yys + 1

	if mmj >= mmLast {
		mmstate = mmAct[mmg]
	} else {
		mmstate = mmAct[mmj]
		if mmChk[mmstate] != -mmn {
			mmstate = mmAct[mmg]
		}
	}
	// dummy call; replaced with literal code
	switch mmnt {

	case 1:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:100
		{
			{
				global := NewAst(mmDollar[2].decs, nil, mmDollar[2].srcfile)
				global.Includes = mmDollar[1].includes
				mmlex.(*mmLexInfo).global = global
			}
		}
	case 2:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:106
		{
			{
				global := NewAst(mmDollar[2].decs, mmDollar[3].call, mmDollar[2].srcfile)
				global.Includes = mmDollar[1].includes
				mmlex.(*mmLexInfo).global = global
			}
		}
	case 3:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:112
		{
			{
				global := NewAst(nil, mmDollar[2].call, mmDollar[2].srcfile)
				global.Includes = mmDollar[1].includes
				mmlex.(*mmLexInfo).global = global
			}
		}
	case 4:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:118
		{
			{
				global := NewAst(mmDollar[1].decs, nil, mmDollar[1].srcfile)
				mmlex.(*mmLexInfo).global = global
			}
		}
	case 5:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:123
		{
			{
				global := NewAst(mmDollar[1].decs, mmDollar[2].call, mmDollar[1].srcfile)
				mmlex.(*mmLexInfo).global = global
			}
		}
	case 6:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:128
		{
			{
				global := NewAst(nil, mmDollar[1].call, mmDollar[1].srcfile)
				mmlex.(*mmLexInfo).global = global
			}
		}
	case 7:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:133
		{
			{
				global := NewAst(nil, nil, mmDollar[1].srcfile)
				mmlex.(*mmLexInfo).global = global
				mmlex.(*mmLexInfo).exp = mmDollar[1].vexp
			}
		}
	case 8:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:142
		{
			{
				mmVAL.includes = append(mmDollar[1].includes, &Include{
					Node:  NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
					Value: mmDollar[3].intern.unquote(mmDollar[3].val),
				})
			}
		}
	case 9:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:148
		{
			{
				mmVAL.includes = []*Include{
					{
						Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
						Value: mmDollar[2].intern.unquote(mmDollar[2].val),
					},
				}
			}
		}
	case 10:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:158
		{
			{
				mmVAL.decs = append(mmDollar[1].decs, mmDollar[2].dec)
			}
		}
	case 11:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:160
		{
			{
				mmVAL.decs = []Dec{mmDollar[1].dec}
			}
		}
	case 12:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:165
		{
			{
				mmVAL.dec = &UserType{
					Node: NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
					Id:   mmDollar[2].intern.Get(mmDollar[2].val),
				}
			}
		}
	case 16:
		mmDollar = mmS[mmpt-11 : mmpt+1]
//line grammar.y:176
		{
			{
				mmVAL.dec = &Pipeline{
					Node:      NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
					Id:        mmDollar[2].intern.Get(mmDollar[2].val),
					InParams:  mmDollar[4].i_params,
					OutParams: mmDollar[5].o_params,
					Calls:     mmDollar[8].calls,
					Callables: &Callables{Table: make(map[string]Callable)},
					Ret:       mmDollar[9].retstm,
					Retain:    mmDollar[10].plretains,
				}
			}
		}
	case 17:
		mmDollar = mmS[mmpt-10 : mmpt+1]
//line grammar.y:190
		{
			{
				mmVAL.dec = &Stage{
					Node:      NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
					Id:        mmDollar[2].intern.Get(mmDollar[2].val),
					InParams:  mmDollar[4].i_params,
					OutParams: mmDollar[5].o_params,
					Src:       mmDollar[6].src,
					ChunkIns:  mmDollar[8].par_tuple.Ins,
					ChunkOuts: mmDollar[8].par_tuple.Outs,
					Split:     mmDollar[8].par_tuple.Present,
					Resources: mmDollar[9].res,
					Retain:    mmDollar[10].stretains,
				}
			}
		}
	case 18:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:207
		{
			{
				mmVAL.dec = &StructType{
					Node:    NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
					Id:      mmDollar[2].intern.Get(mmDollar[2].val),
					Members: mmDollar[4].s_members,
				}
			}
		}
	case 19:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:216
		{
			{
				mmVAL.res = nil
			}
		}
	case 20:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:218
		{
			{
				mmDollar[3].res.Node = NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)
				mmVAL.res = mmDollar[3].res
			}
		}
	case 21:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:226
		{
			{
				mmVAL.res = new(Resources)
			}
		}
	case 22:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:228
		{
			{
				n := NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile)
				mmDollar[1].res.ThreadNode = &n
				i := parseInt(mmDollar[4].val)
				mmDollar[1].res.Threads = int16(i)
				mmVAL.res = mmDollar[1].res
			}
		}
	case 23:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:236
		{
			{
				n := NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile)
				mmDollar[1].res.MemNode = &n
				i := parseInt(mmDollar[4].val)
				mmDollar[1].res.MemGB = int16(i)
				mmVAL.res = mmDollar[1].res
			}
		}
	case 24:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:244
		{
			{
				n := NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile)
				mmDollar[1].res.VMemNode = &n
				i := parseInt(mmDollar[4].val)
				mmDollar[1].res.VMemGB = int16(i)
				mmVAL.res = mmDollar[1].res
			}
		}
	case 25:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:252
		{
			{
				n := NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile)
				mmDollar[1].res.SpecialNode = &n
				mmDollar[1].res.Special = mmDollar[4].intern.unquote(mmDollar[4].val)
				mmVAL.res = mmDollar[1].res
			}
		}
	case 26:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:259
		{
			{
				n := NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile)
				mmDollar[1].res.VolatileNode = &n
				mmDollar[1].res.StrictVolatile = true
				mmVAL.res = mmDollar[1].res
			}
		}
	case 27:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:269
		{
			{
				mmVAL.stretains = nil
			}
		}
	case 28:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:271
		{
			{
				mmVAL.stretains = &RetainParams{
					Node:   NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Params: mmDollar[3].retains,
				}
			}
		}
	case 29:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:281
		{
			{
				mmVAL.retains = nil
			}
		}
	case 30:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:283
		{
			{
				mmVAL.retains = append(mmDollar[1].retains, &RetainParam{
					Node: NewAstNode(mmDollar[2].loc, mmDollar[2].srcfile),
					Id:   mmDollar[2].intern.Get(mmDollar[2].val),
				})
			}
		}
	case 31:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:294
		{
			{
				mmVAL.val = append(append(mmDollar[1].val, '.'), mmDollar[3].val...)
			}
		}
	case 32:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:298
		{
			{
				// set capacity == length so append doesn't overwrite
				// other parts of the buffer later.
				mmVAL.val = mmDollar[1].val[:len(mmDollar[1].val):len(mmDollar[1].val)]
			}
		}
	case 33:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:307
		{
			{
				mmVAL.arr = 0
			}
		}
	case 34:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:309
		{
			{
				mmVAL.arr++
			}
		}
	case 35:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:314
		{
			{
				mmVAL.i_params = &InParams{Table: make(map[string]*InParam)}
			}
		}
	case 36:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:316
		{
			{
				mmDollar[1].i_params.List = append(mmDollar[1].i_params.List, mmDollar[2].inparam)
				mmVAL.i_params = mmDollar[1].i_params
			}
		}
	case 37:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:324
		{
			{
				mmVAL.inparam = &InParam{
					Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Tname: mmDollar[2].type_id,
					Id:    mmDollar[3].intern.Get(mmDollar[3].val),
					Help:  unquote(mmDollar[4].val),
				}
			}
		}
	case 38:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:331
		{
			{
				mmVAL.inparam = &InParam{
					Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Tname: mmDollar[2].type_id,
					Id:    mmDollar[3].intern.Get(mmDollar[3].val),
				}
			}
		}
	case 39:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:340
		{
			{
				mmVAL.o_params = &OutParams{Table: make(map[string]*OutParam)}
			}
		}
	case 40:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:342
		{
			{
				mmDollar[1].o_params.List = append(mmDollar[1].o_params.List, mmDollar[2].outparam)
				mmVAL.o_params = mmDollar[1].o_params
			}
		}
	case 41:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:350
		{
			{
				mmVAL.outparam = &OutParam{
					StructMember: StructMember{
						Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
						Tname: mmDollar[2].type_id,
						Id:    default_out_name,
					},
				}
			}
		}
	case 42:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:358
		{
			{
				mmVAL.outparam = &OutParam{
					StructMember: StructMember{
						Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
						Tname: mmDollar[2].type_id,
						Id:    default_out_name,
						Help:  unquote(mmDollar[3].val),
					},
				}
			}
		}
	case 43:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:367
		{
			{
				mmVAL.outparam = &OutParam{
					StructMember: StructMember{
						Node:    NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
						Tname:   mmDollar[2].type_id,
						Id:      default_out_name,
						OutName: mmDollar[5].intern.unquote(mmDollar[4].val),
						Help:    unquote(mmDollar[3].val),
					},
				}
			}
		}
	case 44:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:377
		{
			{
				mmVAL.outparam = &OutParam{
					StructMember: *mmDollar[2].s_member,
				}
			}
		}
	case 45:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:384
		{
			{
				mmVAL.s_members = []*StructMember{mmDollar[1].s_member}
			}
		}
	case 46:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:386
		{
			{
				mmVAL.s_members = append(mmDollar[1].s_members, mmDollar[2].s_member)
			}
		}
	case 47:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:393
		{
			{
				mmVAL.s_member = &StructMember{
					Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Tname: mmDollar[1].type_id,
					Id:    mmDollar[2].intern.Get(mmDollar[2].val),
				}
			}
		}
	case 48:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:399
		{
			{
				mmVAL.s_member = &StructMember{
					Node:  NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Tname: mmDollar[1].type_id,
					Id:    mmDollar[2].intern.Get(mmDollar[2].val),
					Help:  unquote(mmDollar[3].val),
				}
			}
		}
	case 49:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:406
		{
			{
				mmVAL.s_member = &StructMember{
					Node:    NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Tname:   mmDollar[1].type_id,
					Id:      mmDollar[2].intern.Get(mmDollar[2].val),
					OutName: mmDollar[4].intern.unquote(mmDollar[4].val),
					Help:    unquote(mmDollar[3].val),
				}
			}
		}
	case 50:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:417
		{
			{
				cmd := strings.TrimSpace(mmDollar[3].intern.unquote(mmDollar[3].val))
				stagecodeParts := strings.Fields(mmDollar[3].intern.unquote(mmDollar[3].val))
				mmVAL.src = &SrcParam{
					Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Lang: StageLanguage(mmDollar[2].intern.Get(mmDollar[2].val)),
					cmd:  cmd,
					Path: stagecodeParts[0],
					Args: stagecodeParts[1:],
				}
			}
		}
	case 61:
		mmDollar = mmS[mmpt-6 : mmpt+1]
//line grammar.y:452
		{
			{
				mmVAL.type_id = TypeId{
					Tname:    mmDollar[3].intern.Get(mmDollar[3].val),
					ArrayDim: mmDollar[6].arr,
					MapDim:   1 + mmDollar[4].arr,
				}
			}
		}
	case 62:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:458
		{
			{
				mmVAL.type_id = TypeId{
					Tname:    mmDollar[1].intern.Get(mmDollar[1].val),
					ArrayDim: mmDollar[2].arr,
				}
			}
		}
	case 66:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:472
		{
			{
				mmVAL.par_tuple = paramsTuple{
					Present: false,
					Ins:     &InParams{Table: make(map[string]*InParam)},
					Outs:    &OutParams{Table: make(map[string]*OutParam)},
				}
			}
		}
	case 67:
		mmDollar = mmS[mmpt-6 : mmpt+1]
//line grammar.y:480
		{
			{
				mmVAL.par_tuple = paramsTuple{
					Present: true,
					Ins:     mmDollar[4].i_params,
					Outs:    mmDollar[5].o_params,
				}
			}
		}
	case 68:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:486
		{
			{
				mmVAL.par_tuple = paramsTuple{
					Present: true,
					Ins:     mmDollar[3].i_params,
					Outs:    mmDollar[4].o_params,
				}
			}
		}
	case 69:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:495
		{
			{
				mmVAL.retstm = &ReturnStm{
					Node:     NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Bindings: mmDollar[3].bindings,
				}
			}
		}
	case 70:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:503
		{
			{
				mmVAL.plretains = nil
			}
		}
	case 71:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:505
		{
			{
				mmVAL.plretains = &PipelineRetains{
					Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Refs: mmDollar[3].reflist,
				}
			}
		}
	case 72:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:512
		{
			{
				mmVAL.reflist = nil
			}
		}
	case 73:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:514
		{
			{
				mmVAL.reflist = append(mmDollar[1].reflist, mmDollar[2].rexp)
			}
		}
	case 74:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:518
		{
			{
				mmVAL.calls = append(mmDollar[1].calls, mmDollar[2].call)
			}
		}
	case 75:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:520
		{
			{
				mmVAL.calls = []*CallStm{mmDollar[1].call}
			}
		}
	case 76:
		mmDollar = mmS[mmpt-6 : mmpt+1]
//line grammar.y:525
		{
			{
				id := mmDollar[3].intern.Get(mmDollar[3].val)
				mmVAL.call = &CallStm{
					Node:      NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Modifiers: mmDollar[2].modifiers,
					Id:        id,
					DecId:     id,
					Bindings:  mmDollar[5].bindings,
				}
			}
		}
	case 77:
		mmDollar = mmS[mmpt-8 : mmpt+1]
//line grammar.y:534
		{
			{
				mmVAL.call = &CallStm{
					Node:      NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Modifiers: mmDollar[2].modifiers,
					Id:        mmDollar[5].intern.Get(mmDollar[5].val),
					DecId:     mmDollar[3].intern.Get(mmDollar[3].val),
					Bindings:  mmDollar[7].bindings,
				}
			}
		}
	case 78:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:542
		{
			{
				mmDollar[1].call.Modifiers.Bindings = mmDollar[4].bindings
				mmVAL.call = mmDollar[1].call
			}
		}
	case 79:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:550
		{
			{
				mmVAL.modifiers = new(Modifiers)
			}
		}
	case 80:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:552
		{
			{
				mmVAL.modifiers.Local = true
			}
		}
	case 81:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:554
		{
			{
				mmVAL.modifiers.Preflight = true
			}
		}
	case 82:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:556
		{
			{
				mmVAL.modifiers.Volatile = true
			}
		}
	case 83:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:561
		{
			{
				mmVAL.bindings = &BindStms{
					Node:  NewAstNode(mmDollar[0].loc, mmDollar[0].srcfile),
					Table: make(map[string]*BindStm),
				}
			}
		}
	case 84:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:566
		{
			{
				mmDollar[1].bindings.List = append(mmDollar[1].bindings.List, mmDollar[2].binding)
				mmVAL.bindings = mmDollar[1].bindings
			}
		}
	case 85:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:574
		{
			{
				mmVAL.binding = &BindStm{
					Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Id:   local,
					Exp:  mmDollar[3].vexp,
				}
			}
		}
	case 86:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:580
		{
			{
				mmVAL.binding = &BindStm{
					Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Id:   preflight,
					Exp:  mmDollar[3].vexp,
				}
			}
		}
	case 87:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:586
		{
			{
				mmVAL.binding = &BindStm{
					Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Id:   volatile,
					Exp:  mmDollar[3].vexp,
				}
			}
		}
	case 88:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:592
		{
			{
				mmVAL.binding = &BindStm{
					Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Id:   disabled,
					Exp:  mmDollar[3].rexp,
				}
			}
		}
	case 89:
		mmDollar = mmS[mmpt-0 : mmpt+1]
//line grammar.y:600
		{
			{
				mmVAL.bindings = &BindStms{
					Node:  NewAstNode(mmDollar[0].loc, mmDollar[0].srcfile),
					Table: make(map[string]*BindStm),
				}
			}
		}
	case 90:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:605
		{
			{
				mmDollar[1].bindings.List = append(mmDollar[1].bindings.List, mmDollar[2].binding)
				mmVAL.bindings = mmDollar[1].bindings
			}
		}
	case 91:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:613
		{
			{
				mmVAL.binding = &BindStm{
					Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Id:   mmDollar[1].intern.Get(mmDollar[1].val),
					Exp:  mmDollar[3].exp,
				}
			}
		}
	case 92:
		mmDollar = mmS[mmpt-8 : mmpt+1]
//line grammar.y:619
		{
			{
				mmVAL.binding = &BindStm{
					Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Id:   mmDollar[1].intern.Get(mmDollar[1].val),
					Exp: &SweepExp{
						valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
						Value:  mmDollar[5].exps,
					},
					Sweep: true,
				}
			}
		}
	case 93:
		mmDollar = mmS[mmpt-7 : mmpt+1]
//line grammar.y:629
		{
			{
				mmVAL.binding = &BindStm{
					Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Id:   mmDollar[1].intern.Get(mmDollar[1].val),
					Exp: &SweepExp{
						valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
						Value:  mmDollar[5].exps,
					},
					Sweep: true,
				}
			}
		}
	case 94:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:642
		{
			{
				mmVAL.exps = append(mmDollar[1].exps, mmDollar[3].exp)
			}
		}
	case 95:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:644
		{
			{
				mmVAL.exps = []Exp{mmDollar[1].exp}
			}
		}
	case 96:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:649
		{
			{
				mmDollar[1].kvpairs[unquote(mmDollar[3].val)] = mmDollar[5].exp
				mmVAL.kvpairs = mmDollar[1].kvpairs
			}
		}
	case 97:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:654
		{
			{
				mmVAL.kvpairs = map[string]Exp{unquote(mmDollar[1].val): mmDollar[3].exp}
			}
		}
	case 98:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:659
		{
			{
				mmDollar[1].kvpairs[mmDollar[3].intern.Get(mmDollar[3].val)] = mmDollar[5].exp
				mmVAL.kvpairs = mmDollar[1].kvpairs
			}
		}
	case 99:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:664
		{
			{
				mmVAL.kvpairs = map[string]Exp{mmDollar[1].intern.Get(mmDollar[1].val): mmDollar[3].exp}
			}
		}
	case 100:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:669
		{
			{
				mmVAL.exp = mmDollar[1].vexp
			}
		}
	case 101:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:671
		{
			{
				mmVAL.exp = mmDollar[1].rexp
			}
		}
	case 102:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:675
		{
			{ // Lexer guarantees parseable float strings.
				f := parseFloat(mmDollar[1].val)
				mmVAL.vexp = &FloatExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Value:  f,
				}
			}
		}
	case 103:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:683
		{
			{ // Lexer guarantees parseable int strings.
				i := parseInt(mmDollar[1].val)
				mmVAL.vexp = &IntExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Value:  i,
				}
			}
		}
	case 104:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:691
		{
			{
				mmVAL.vexp = &StringExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Kind:   KindString,
					Value:  unquote(mmDollar[1].val),
				}
			}
		}
	case 108:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:700
		{
			{
				mmVAL.vexp = &NullExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
				}
			}
		}
	case 109:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:707
		{
			{
				mmVAL.vexp = &ArrayExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Value:  mmDollar[2].exps,
				}
			}
		}
	case 110:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:712
		{
			{
				mmVAL.vexp = &ArrayExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Value:  mmDollar[2].exps,
				}
			}
		}
	case 111:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:717
		{
			{
				mmVAL.vexp = &ArrayExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Value:  make([]Exp, 0),
				}
			}
		}
	case 112:
		mmDollar = mmS[mmpt-2 : mmpt+1]
//line grammar.y:724
		{
			{
				mmVAL.vexp = &MapExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Kind:   KindMap,
					Value:  make(map[string]Exp, 0),
				}
			}
		}
	case 113:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:730
		{
			{
				mmVAL.vexp = &MapExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Kind:   KindMap,
					Value:  mmDollar[2].kvpairs,
				}
			}
		}
	case 114:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:736
		{
			{
				mmVAL.vexp = &MapExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Kind:   KindMap,
					Value:  mmDollar[2].kvpairs,
				}
			}
		}
	case 115:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:742
		{
			{
				mmVAL.vexp = &MapExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Kind:   KindStruct,
					Value:  mmDollar[2].kvpairs,
				}
			}
		}
	case 116:
		mmDollar = mmS[mmpt-4 : mmpt+1]
//line grammar.y:748
		{
			{
				mmVAL.vexp = &MapExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Kind:   KindStruct,
					Value:  mmDollar[2].kvpairs,
				}
			}
		}
	case 117:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:756
		{
			{
				mmVAL.vexp = &BoolExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Value:  true,
				}
			}
		}
	case 118:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:761
		{
			{
				mmVAL.vexp = &BoolExp{
					valExp: valExp{Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile)},
					Value:  false,
				}
			}
		}
	case 119:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:768
		{
			{
				mmVAL.rexp = &RefExp{
					Node:     NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Kind:     KindCall,
					Id:       mmDollar[1].intern.Get(mmDollar[1].val),
					OutputId: mmDollar[3].intern.Get(mmDollar[3].val),
				}
			}
		}
	case 120:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:775
		{
			{
				mmVAL.rexp = &RefExp{
					Node:     NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Kind:     KindCall,
					Id:       mmDollar[1].intern.Get(mmDollar[1].val),
					OutputId: default_out_name,
				}
			}
		}
	case 121:
		mmDollar = mmS[mmpt-1 : mmpt+1]
//line grammar.y:783
		{
			{
				mmVAL.rexp = &RefExp{
					Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Kind: KindCall,
					Id:   mmDollar[1].intern.Get(mmDollar[1].val),
				}
			}
		}
	case 122:
		mmDollar = mmS[mmpt-3 : mmpt+1]
//line grammar.y:789
		{
			{
				mmVAL.rexp = &RefExp{
					Node: NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Kind: KindSelf,
					Id:   mmDollar[3].intern.Get(mmDollar[3].val),
				}
			}
		}
	case 123:
		mmDollar = mmS[mmpt-5 : mmpt+1]
//line grammar.y:795
		{
			{
				mmVAL.rexp = &RefExp{
					Node:     NewAstNode(mmDollar[1].loc, mmDollar[1].srcfile),
					Kind:     KindSelf,
					Id:       mmDollar[3].intern.Get(mmDollar[3].val),
					OutputId: mmDollar[5].intern.Get(mmDollar[5].val),
				}
			}
		}
	}
	goto mmstack /* stack new state and value */
}
