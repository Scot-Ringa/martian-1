# A super-simple test pipeline with forks.
# Files storing json.
filetype json;

# Adds a key to the json in a file.
stage ADD_KEY1(
    # The key to add
    in  string key,
    # The value to add for this key.
    in  string value,
    # The file to read the initial dictionary from.
    in  json   start,
    # A file to check.  If the file exists, parse its content as a signal
    # for the job to send to itself.
    in  string failfile,
    # The output file.
    out json   result,
    # The source file.
    src py     "stages/add_key",
)

# Adds a key to the json in a file.
stage ADD_KEY2(
    in  string key,
    in  string value,
    in  json   start,
    in  string failfile,
    out json   result,
    src py     "stages/add_key",
)

# Adds a key to the json in a file.
stage ADD_KEY3(
    in  string key,
    in  string value,
    in  json   start,
    in  string failfile,
    out json   result,
    src py     "stages/add_key",
)

# Adds a key to the json in a file.
stage ADD_KEY4(
    in  string key,
    in  string value,
    in  json   start,
    in  string failfile,
    out json   result,
    src py     "stages/add_key",
)

# Takes two files containing json dictionaries and merges them.
stage MERGE_JSON(
    in  json json1,
    in  json json2,
    out json result,
    src py   "stages/merge_json",
)

# Adds some keys to some json files and then merges them.
pipeline AWESOME(
    in  string key1,
    in  string value1,
    in  string key2,
    in  string value2,
    out json[] outfile,
)
{
    call ADD_KEY1(
        key      = self.key1,
        value    = self.value1,
        failfile = "fail1",
        start    = null,
    )

    call ADD_KEY2(
        key      = self.key2,
        value    = self.value2,
        failfile = "fail2",
        start    = ADD_KEY1.result,
    )

    call ADD_KEY3(
        key      = "3",
        value    = "three",
        failfile = "fail3",
        start    = ADD_KEY2.result,
    )

    map call ADD_KEY4(
        key      = "4",
        value    = split [
            "four",
            "feir",
        ],
        failfile = "fail4",
        start    = ADD_KEY2.result,
    )

    map call MERGE_JSON(
        json1 = ADD_KEY3.result,
        json2 = split ADD_KEY4.result,
    )

    return (
        outfile = MERGE_JSON.result,
    )
}

# Calls the pipelines, sweeping over two forks.
map call AWESOME(
    key1   = "1",
    value1 = "one",
    key2   = "2",
    value2 = split {
        "english": "two",
        "fran√ßaise": "deux",
    },
)
