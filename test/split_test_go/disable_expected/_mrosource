#
# @include "pipeline_stages.mro"
#

# A super-simple test pipeline with splits.

# Computes the sum of each value in a separate chunk, and
# sums the squares in the join phase.
stage SUM_SQUARES(
    # These values are squared and then summed over.
    in  float[] values  "The values to sum over",
    out float   sum     "The sum of the squares of the values",
    src comp    "sum_squares",
) split (
    in  float   value,
    out float   square,
) using (
    mem_gb = 1,
)

# Prints the output to the user, but only if the pipestance doesn't finish.
stage REPORT(
    in  float[] values,
    in  float   sum,
    src py      "stages/report",
) using (
    mem_gb = 1,
)

# Runs the stage.
pipeline SUM_SQUARE_PIPELINE(
    in  float[] values,
    in  bool    disable_sq,
    out float   sum,
)
{
    call SUM_SQUARES(
        values = self.values,
    ) using (
        disabled = self.disable_sq,
    )

    call REPORT(
        values = self.values,
        sum    = SUM_SQUARES.sum,
    )

    return (
        sum = SUM_SQUARES.sum,
    )
}

#
# @include "disable_pipeline.mro"
#

# Calls the pipelines, sweeping over two forks.
map call SUM_SQUARE_PIPELINE(
    values     = [
        1,
        2,
        3,
    ],
    disable_sq = split [
        true,
        false,
    ],
)
